<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于我学习APP时构想一款APP的想法</title>
      <link href="/inspiration/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AD%A6%E4%B9%A0APP%E6%97%B6%E6%9E%84%E6%83%B3%E4%B8%80%E6%AC%BEAPP%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/inspiration/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AD%A6%E4%B9%A0APP%E6%97%B6%E6%9E%84%E6%83%B3%E4%B8%80%E6%AC%BEAPP%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>  在寒假的之后几天，闲来无事便找到了一本电子书开始学起APP。在学习APP的时候，我看到了一个功能可以直接跳转到拨打电话的界面，于是我便把自己的电话号码输入镶嵌到了代码中，这样我点击一个按钮就可以直接跳转到拨打电话的那个界面了，然后我就直接把这个项目给打包成了apk文件，再然后就是一波发发发操作，发给我的朋友们当然是为了装逼。发给其中一位朋友的时候他问我这是什么，这一个小小的问题竟然让我愣了愣，我该怎么说好嘞，（此时这个问题就已经上升到另外一个高度，我必须得向非本专业的人解释）我的第一感觉就是这样说，你可以把它想象成QQ，跟它一样都是一个软件，但是又想想这样说还是比较牵强，最后我用了一个很简单的方法说明了我的这个APP的功能。发给另外一个朋友的时候，他竟然表现出很少羡慕的样子，应该我为他做一个专属的同款软件。这时我突然想我以后可以在这个软件的基础上添加一些功能直接做一个成形的软件。</p><p>  晚上我躺在铺上睡觉的时候，突然脑海里想到这个我对这个软件的新看法。像QQ，我何不模仿QQ的分组，也就是将直接的电话号码进行一个分组。又想了想，这个似乎创新不太大的样子，毕竟手机自带的电话簿也就差不了太多。又经过一番思考，我似乎已经忘记了最开始的初衷了，直接直接点击按钮不就是为了打电话更快吗？但是每一个人打电话的人不一样，所以需要设计一个数据库，每一个用户需要存放自己的电话，这样只要数据库还有账号在这些电话号码也不会丢失。所以在这个APP的底部就出现了三部分，第一部分也就是主页，可以延续最开始的初衷，快速打电话，这里应该有一个设置，就是设置可以给那几个人快速打电话，可以是自己的爱人、亲人等等。然后第二部分就是给自己已有的电话号码分组，最后第三部分就是登录，设置一下自己的信息这些。</p><p>  注：灵感还是晚上来得快。</p>]]></content>
      
      
      <categories>
          
          <category> 灵光乍现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灵光乍现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯法简介</title>
      <link href="/algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
      <url>/algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><p>回溯法就是一种用穷举的方法来进行遍历，在遍历的时候可以用剪枝操作进行优化。<br>回溯法其实就是需要用到递归函数，当然调用递归的时候也会伴随着回溯。</p><h2 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h2><ul><li><p>终止条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(终止条件)&#123;</span><br><span class="line">    存放结果</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i &lt;- 0 to len then</span><br><span class="line">  做出选择</span><br><span class="line">  tracebacking();</span><br><span class="line">  剪枝，撤销选择的结果</span><br></pre></td></tr></table></figure></li><li><p>最终模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void tracebacking()&#123;</span><br><span class="line">    if(终止条件)&#123;</span><br><span class="line">      存放结果</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    for i &lt;- 0 to len then</span><br><span class="line">      做出选择</span><br><span class="line">      tracebacking();</span><br><span class="line">      剪枝，撤销选择的结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h2><h3 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h3><p>问题: 给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。你可以按任何顺序 返回答案。<br>输入：n = 4, k = 2<br>输出：[[2,4],[3,4],[2,3],[1,2],[1,3],[1,4],]</p><p>分析: 从 [1, n] 共有 n 个数安装 k 个数进行组合，其中得到的组合不重复。<br>我们首先从遍历的角度来看待，需要 k 个数进行组合，那么就需要 k 重循环，显然 k 越大这种方式就越不可行。<br>所以我们就想到了递归的方式，再仔细分析分析，我们不就是需要遍历出来所有的结果吗？那么这道题用回溯法就可以了。</p><ul><li><p>定义递归函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* combine 用来存放最后的结果</span></span><br><span class="line"><span class="comment">* con 用来存放每一次合理情况的结果</span></span><br><span class="line"><span class="comment">* start 用来表示每一次开始遍历的起点</span></span><br><span class="line"><span class="comment">* n 表示输入的 n 个数</span></span><br><span class="line"><span class="comment">* k 表示用 k 个数进行组合</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">tracebacking(List&lt;List&lt;Integer&gt;&gt; combine,List&lt;Integer&gt; con, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k);</span><br></pre></td></tr></table></figure></li><li><p>终止条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当 con 的长度为 k 的时候所以就不需要进行组合了， 所以这一次获得的结果是合理的</span></span><br><span class="line"><span class="keyword">if</span>(con.size == k)&#123;</span><br><span class="line">    combian.add(<span class="keyword">new</span> ArrayList&lt;&gt;(con));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="comment">// 做出选择</span></span><br><span class="line">  con.add(i);</span><br><span class="line">  tracebacking(combine, con, i+<span class="number">1</span>, n, k);</span><br><span class="line">  <span class="comment">// 剪枝操作</span></span><br><span class="line">  con.remove(con.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; combine = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      List&lt;Integer&gt; con = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">// 其中一次小小的优化</span></span><br><span class="line">      <span class="keyword">if</span> (n == k)&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">              con.add(i);</span><br><span class="line">          &#125;</span><br><span class="line">          combine.add(con);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          tracebacking(combine, con, <span class="number">1</span>, n, k);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> combine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tracebacking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; combine,List&lt;Integer&gt; con, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (con.size() == k)&#123;</span><br><span class="line">          combine.add(<span class="keyword">new</span> ArrayList&lt;&gt;(con));</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">          con.add(i);</span><br><span class="line">          tracebacking(combine, con, i+<span class="number">1</span>, n, k);</span><br><span class="line">          con.remove(con.size()-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/algorithm/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/algorithm/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>问题：<br>在$N$个物品里面，每一个物品$i$对应的价值为$V_i$，重量为$W_i$，当背包可容纳的最大重量$size$确定时，需使得该背包获得的价值最大。假设物品对应的价值为${12, 10, 20, 15}$，重量为${2, 1, 3, 2}$，背包承受的最大重量为${size = 5}$。</p><p>分析：<br>当背包里面什么也不用放的时候，背包的容量为$0$，对应的最大价值也为$0$。<br>该背包的最大特点就是对于当前的这个物品是否放入背包里面还是不放入。<br>此时的状态转移发方程式就可以写为:</p><script type="math/tex; mode=display">F[i, v] = max(F[i-1][v], F[i-1][v-weights[i]] + values[i])</script><p>$F[i-1][v]$就是指的是当前的物品不放入的最大价值，<br>$F[i-1][v-weights[i]] + values[i]$就是指的是当前的物品放入的最大价值，<br>$v-weight[i]$就是指的是放了当前这个物品后背包还剩的容量。</p><p>以上题目对应的二维数组则为:(其中横轴对应的是背包的容量，纵轴对应的是当前的物品)</p><script type="math/tex; mode=display">\begin{array}{c|lcr}  & \text{0} & \text{1} & \text{2} & \text{3} & \text{4} & \text{5}\\\hline1 & 0 & 0  & 12 & 12 & 12  & 12 \\2 & 0 & 10 & 12 & 22 & 22  & 22\\3 & 0 & 10 & 12 & 22 & 30  & 32\\4 & 0 & 10 & 15 & 25 & 30  & 37\end{array}</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span>[] values, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] F = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; F.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt; F[i].length; v++) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 若当前背包的容量小于所需要装入的物品的容量时候，</span></span><br><span class="line"><span class="comment">                * 由于装不下所以当前背包的最大价值就为上一次的最大价值。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">if</span> (v &lt; weights[i]) &#123;</span><br><span class="line">                F[i][v] = F[i - <span class="number">1</span>][v];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                F[i][v] = Math.max(F[i - <span class="number">1</span>][v], F[i - <span class="number">1</span>][v - weights[i]] + values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F[weights.length-<span class="number">1</span>][size];</span><br></pre></td></tr></table></figure><p>上述的解法的时间复杂度和空间复杂度都为$O(iv)$，我们能不能在上述的解法中进行优化嘞？</p><ul><li><p>我们可以使用备忘录的方式，将当前的数组存入一个列表中，当后面有相同部分的时候我们就取出来。</p></li><li><p>我们可以优化空间复杂度，之前用一个二维数组装的最大价值，现在我们使用一维数组。</p></li></ul><p>状态转移方程为:</p><script type="math/tex; mode=display">F[v] = max(F[v], F[v-weights[i]] + values[i])</script><p>一维数组如下:(其中横轴对应的是背包的容量，纵轴对应的是当前的物品最大价值)</p><script type="math/tex; mode=display">\begin{array}{c|lcr}  & \text{0} & \text{1} & \text{2} & \text{3} & \text{4} & \text{5}\\\hline最大价值 & 0 & 10 & 15 & 22 & 30 & 37 \\\end{array}</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span>[] values, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] F = <span class="keyword">new</span> <span class="keyword">int</span>[size+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = size; v &gt;= weights[i]; v--) &#123;</span><br><span class="line">            F[v] = Math.max(F[v], F[v - weights[i]] + values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] wights = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] values = &#123;<span class="number">0</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> value = maxValue(wights, values, size);</span><br><span class="line">    System.out.println(<span class="string">&quot;MAXVALUE: &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>问题：<br>在$N$个物品里面，每一个物品$i$对应的价值为$V_i$，重量为$W_i$，每一个物品都可以无限选取，当背包可容纳的最大重量$size$确定时，需使得该背包获得的价值最大。假设物品对应的价值为${12, 10, 20, 15}$，重量为${2, 1, 3, 2}$，背包承受的最大重量为${size = 5}$。</p><p>分析：<br>从物品的选取角度上已经相对于01背包相差了不少，选取的策略也发生了改变，并非再是取与不取两种情况了，相应的我们可以取得某件物品$1$个、$2$个、$3$个，甚至$n$个。<br>二维数组类型状态方程：</p><script type="math/tex; mode=display">F[i,v] = max(F[i-1, v], F[i][v-weights[i]] + values[i])</script><p>一维数组类型状态方程：</p><script type="math/tex; mode=display">F[v] = max(F[v], F[v-weights[i]] + values[i])</script><p>一维数组如下:(其中横轴对应的是背包的容量，纵轴对应的是当前的物品最大价值)</p><script type="math/tex; mode=display">\begin{array}{c|lcr}  & \text{0} & \text{1} & \text{2} & \text{3} & \text{4} & \text{5}\\\hline最大价值 & 0 & 10 & 20 & 30 & 40 & 50 \\\end{array}</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span>[] value, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] F = <span class="keyword">new</span> <span class="keyword">int</span>[size+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 在当前所选取的物品中，在背包装入多大容量时的最大价值，可以选取已经选择的产品</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = weights[i]; v &lt;= size; v++) &#123;</span><br><span class="line">            F[v] = Math.max(F[v], F[v-weights[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Warshall算法和Floyd算法</title>
      <link href="/algorithm/Warshall%E7%AE%97%E6%B3%95%E5%92%8CFloyd%E7%AE%97%E6%B3%95/"/>
      <url>/algorithm/Warshall%E7%AE%97%E6%B3%95%E5%92%8CFloyd%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Waseshall算法"><a href="#Waseshall算法" class="headerlink" title="Waseshall算法"></a>Waseshall算法</h2><p>$Waseshall$算法用来求解<mark class="hl-label blue">传递闭包</mark> 问题。<br>一个$n$顶点有向图的传递闭包可以定义为一个$n$阶布尔矩阵$T=${ $ t[i, j] $ }，如果从第$i$个顶点到第$j$个顶点之间存在一条有效的有向路径（即长度大于$0$的有向路径），矩阵第$i$行$（1 \le i \le n ）$第$j$行$（1 \le j \le n）$的元素为$1$，否者，$ t[i, j] $为$0$。</p><div class="mermaid">graph LR  A((A)) --&gt; B((B))  B((B)) --&gt; C((C))  C((C)) --&gt; D((D))</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Warshall</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] warshall = warshall(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; warshall.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; warshall[i].length; j++) &#123;</span><br><span class="line">                System.out.print(warshall[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] warshall(<span class="keyword">int</span>[][] matrix)&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] R = matrix.clone();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; R.length; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; R.length; j++) &#123;</span><br><span class="line">                    R[i][j] = R[i][j] | R[i][k] &amp; R[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table>    <tr>        <td>0</td>        <td>1</td>        <td>1</td>        <td>1</td>    </tr>    <tr>        <td>0</td>        <td>0</td>        <td>1</td>        <td>1</td>    </tr>    <tr>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>    </tr>    <tr>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>    </tr></table><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Floyd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">2</span>, c, <span class="number">1</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, c&#125;,</span><br><span class="line">                &#123;c, c, <span class="number">0</span>, <span class="number">4</span>, c&#125;,</span><br><span class="line">                &#123;c, c, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>, c, c, c, <span class="number">0</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] floyd = floyd(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; floyd.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; floyd[i].length; j++) &#123;</span><br><span class="line">                System.out.print(floyd[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] floyd(<span class="keyword">int</span>[][] matrix)&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] D = matrix.clone();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; D.length; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; D.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; D.length; j++) &#123;</span><br><span class="line">                    D[i][j] = Math.min(D[i][j], D[i][k] + D[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table>    <tr>        <td>0</td>        <td>2</td>        <td>3</td>        <td>1</td>        <td>4</td>    </tr>    <tr>        <td>6</td>        <td>0</td>        <td>3</td>        <td>2</td>        <td>5</td>    </tr>    <tr>        <td>10</td>        <td>12</td>        <td>0</td>        <td>4</td>        <td>7</td>    </tr>    <tr>        <td>6</td>        <td>8</td>        <td>2</td>        <td>0</td>        <td>3</td>    </tr>    <tr>        <td>3</td>        <td>5</td>        <td>6</td>        <td>4</td>        <td>0</td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>昨日今日</title>
      <link href="/life/%E6%98%A8%E6%97%A5%E4%BB%8A%E6%97%A5/"/>
      <url>/life/%E6%98%A8%E6%97%A5%E4%BB%8A%E6%97%A5/</url>
      
        <content type="html"><![CDATA[<p>昨天的的天气，夹杂着小雨而来，小风袭来，又显得一丝寒意入骨。<br>看着天气是如此的糟糕，但是这样的天气无疑又让一个人清醒了许多。<br>今天，外出之时看见，看见了天边的暖阳升起。<br>冬日里，这样的天气总给人一种惬意的感觉，使我充满动力。</p>]]></content>
      
      
      <categories>
          
          <category> 生活一记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活一记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千古一人</title>
      <link href="/history/%E5%8D%83%E5%8F%A4%E4%B8%80%E4%BA%BA/"/>
      <url>/history/%E5%8D%83%E5%8F%A4%E4%B8%80%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>千古一人，绝无他人。一生坎坷曲折，成就了他是一个复杂的人，胸怀天下，力图改革，是的，他做到了。<br>他就是张居正。</p>]]></content>
      
      
      <categories>
          
          <category> 历史闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
